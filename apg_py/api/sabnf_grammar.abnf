;
; ABNF for Python APG SABNF
; 08/19/2022
; RFC 5234 with some restrictions and additions.
; Compliant with  RFC 7405 for case-sensitive literal string notation
;  - accepts %s"string" as a case-sensitive string
;  - accepts %i"string" as a case-insensitive string
;  - accepts "string" as a case-insensitive string
;  - accepts 'string' as a case-sensitive string
;
; Some restrictions:
;   1. Rules must begin at first character of each line.
;      Indentations on first rule and rules thereafter are not allowed.
;   2. Relaxed line endings. CRLF, LF or CR are accepted as valid line ending.
;   3. Prose values, i.e. <prose value>, are accepted as valid grammar syntax.
;      However, a working parser cannot be generated from them.
;
; Super set (SABNF) additions:
;   1. Look-ahead (syntactic predicate) operators are accepted as element prefixes.
;      & is the positive look-ahead operator, succeeds and backtracks if the look-ahead phrase is found
;      ! is the negative look-ahead operator, succeeds and backtracks if the look-ahead phrase is NOT found
;      e.g. &%d13 or &rule or !(A / B)
;   2. User-defined Terminals (UDT) of the form, u_name and e_name are accepted.
;      They indicate the the user will hand-write the phrase acceptance algorithm.
;      e_name may return an empty phrase.
;      u_name may not return an empty phrase. The parser will inforce this.
;      'name' is alpha followed by alpha/num/hyphen just like a rule name.
;      u_name/e_name may be used as an element but no rule definition is given.
;      e.g. rule = A / u_myUdt
;           A = "a"
;      would be a valid grammar.
;      e_name 
;   3. Case-sensitive, single-quoted strings are accepted.
;      e.g. 'abc' would be equivalent to %d97.98.99
;      (kept for backward compatibility, but superseded by %s"abc")  
;   4. Look-behind operators are accepted as element prefixes.
;      && is the positive look-behind operator, succeeds and backtracks if the look-behind phrase is found
;      !! is the negative look-behind operator, succeeds and backtracks if the look-behind phrase is NOT found
;      e.g. &&%d13 or &&rule or !!(A / B)
;   5. Back referencing operators, i.e. \rulename or \e_name or \u_name, are accepted.
;      A back reference operator acts like a TLS or TBS terminal except that the phrase it attempts
;      to match is a phrase previously matched by the rule or UDT 'rulename', 'e_name' or 'u_name'.
;      There are two modes of previous phrase matching - the recursive mode and the universal mode.
;      In universal mode, \rulename matches the last match to 'rulename' regardless of where it was found.
;      In recursive mode, \rulename matches the last match found on the closest recursive parent.
;      It would be used primarily with "nesting pairs" type recursive rules.
;      Back reference modifiers can be used to specify case and mode.
;      \A defaults to case-insensitive and universal mode, e.g. \A === \%i%uA
;      Modifiers %i and %s determine case-insensitive and case-sensitive mode, respectively.
;      Modifiers %u and %r determine universal mode and recursive mode, respectively.
;      Case and mode modifiers can appear in any order, e.g. \%s%rA === \%r%sA. 
;   7. String begin anchor, ABG(%^) matches the beginning of the input string location.
;      Returns EMPTY or NOMATCH. Never consumes any characters.
;   8. String end anchor, AEN(%$) matches the end of the input string location.
;      Returns EMPTY or NOMATCH. Never consumes any characters.
;
file                = *(blank-line / rule)
blank-line          = *(%d32/%d9) [comment] line-end
rule                = rule-lookup owsp alternation owsp line-end
rule-lookup         = (rule-name) owsp equals
equals              = inc-alt / defined
rule-name           = alphanum
defined             = %d61
inc-alt             = %d61.47
alternation         = concatenation *(owsp alt-op concatenation)
concatenation       = repetition *(cat-op repetition)
repetition          = [modifier] (group / option / element)
modifier            = (predicate [rep-op])
                    / rep-op
predicate           = bka-op
                    / bkn-op
                    / and-op
                    / not-op
element             = udt-op
                    / rnm-op
                    / trg-op
                    / tbs-op
                    / tls-op
                    / cls-op
                    / bkr-op
                    / abg-op
                    / aen-op
                    / pros-val
group               = %d40 owsp  alternation group-close
group-close         = owsp %d41
option              = option-open owsp alternation option-close
option-open         = %d91
option-close        = owsp %d93
rnm-op              = alphanum
bkr-op              = %d92 [bkrModifier] bkr-name
bkrModifier         = (cs [um / rm]) / (ci [um / rm]) / (um [cs /ci]) / (rm [cs / ci])
cs                  = '%s'
ci                  = '%i'
um                  = '%u'
rm                  = '%r'
bkr-name            = uname / ename / rname
rname               = alphanum
uname               = %d117.95 alphanum
ename               = %d101.95 alphanum
udt-op              = udt-empty
                    / udt-non-empty
udt-non-empty       = %d117.95 alphanum
udt-empty           = %d101.95 alphanum
rep-op              = (rep-min star-op rep-max)
                    / (rep-min star-op)
                    / (star-op rep-max)
                    / star-op
                    / rep-min-max
alt-op              = %d47 owsp
cat-op              = wsp
star-op             = %d42
and-op              = %d38
not-op              = %d33
bka-op              = %d38.38
bkn-op              = %d33.33
abg-op              = %d37.94
aen-op              = %d37.36
trg-op              = %d37 ((dec dmin %d45 dmax) 
                    / (hex xmin %d45 xmax) 
                    / (bin bmin %d45 bmax))
tbs-op              = %d37 ((dec d-string *(%d46 d-string)) 
                    / (hex x-string *(%d46 x-string)) 
                    / (bin b-string *(%d46 b-string)))
tls-op              = tls-case %d34 tls-string tls-close
tls-case            = [ci / cs]
tls-close           = %d34
tls-string          = *(%d32-33/%d35-126/string-tab)
string-tab          = %d9
cls-op              = %d39 cls-string cls-close
cls-close           = %d39
cls-string          = *(%d32-38/%d40-126/string-tab)
pros-val            = pros-val-open pros-val-string pros-val-close
pros-val-open       = %d60
pros-val-string     = *(%d32-61/%d63-126/string-tab)
pros-val-close      = %d62
rep-min             = rep-num
rep-min-max         = rep-num
rep-max             = rep-num
rep-num             = 1*(%d48-57)
d-string            = dnum
x-string            = xnum
b-string            = bnum
dec                 = (%d68/%d100)
hex                 = (%d88/%d120)
bin                 = (%d66/%d98)
dmin                = dnum
dmax                = dnum
bmin                = bnum
bmax                = bnum
xmin                = xnum
xmax                = xnum
dnum                = 1*(%d48-57)
bnum                = 1*%d48-49
xnum                = 1*(%d48-57 / %d65-70 / %d97-102)
;
; Basics
alphanum            = (%d97-122/%d65-90) *(%d97-122/%d65-90/%d48-57/%d45)
owsp                = *space
wsp                 = 1*space
space               = %d32
                    / %d9
                    / comment
                    / line-continue
comment             = %d59 *(%d32-126 / %d9)
line-end            = %d13.10
                    / %d10
                    / %d13
line-continue       = (%d13.10 / %d10 / %d13) (%d32 / %d9)
